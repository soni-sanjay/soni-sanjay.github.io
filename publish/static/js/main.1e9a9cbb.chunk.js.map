{"version":3,"sources":["components/bill/billInfo.js","modules/table/printableColumns.js","components/bill/billDetails.js","components/bill/billFooter.js","components/bill/index.js","components/simpleBiller/printButton.js","components/simpleBiller/grandTotalSticky.js","components/simpleBiller/itemLabel.js","modules/printUtility.js","components/simpleBiller/itemField.js","components/simpleBiller/headerInputs.js","components/simpleBiller/dataInputs.js","modules/table/printableRow.js","modules/table/printableRows.js","components/button/button.js","components/button/addRowButton.js","components/button/deleteRowButton.js","components/simpleBiller/index.js","App.js","serviceWorker.js","index.js"],"names":["BillInfo","billInfo","infoStyles","borderBottom","paddingBottom","labels","className","style","fontSize","id","customerName","voucherNo","customerContact","billDate","PrintColumn","name","itemId","DataCell","row","generateCellId","sno","HeaderCell","this","rowSeq","PrintColumns","columns","HeaderCells","map","columnInfo","key","DataCells","BillDetails","dataGroup","grandTotal","BillFooter","Proprieter","Name","Contact","AddressLine1","AddressLine2","AddressLine3","textAlign","Pincode","flipperValues","BillContainer","props","getSingle","children","Printable","getPrintVersion","state","flipperValue","flipCopyButton","bind","printSellerCopy","setState","onClick","hidden","isPrinting","Component","React","forwardRef","ref","Establishment","PrintButton","printTheTable","prevProps","prevState","snapshot","window","print","onafterprint","text","GrandTotalSticky","ItemLabel","label","PrintUtility","parentId","index","listener","cells","title","grandTotalValue","cellId","getCurrentCellId","cell","document","getElementById","highlightChangedElement","innerHTML","updateSubTotal","updateGrandTotal","total","innerText","element","timeout","oldColor","parentElement","backgroundColor","setTimeout","printHeaderId","type","Date","value","toLocaleDateString","rowSet","itemValue","parseFloat","pattern","test","currentRow","getCurrentRow","RegExp","updatePrintItem","InputField","isItemVar","handleOnInput","handleOnChange","event","updatePrintObj","target","updatePrintHeader","onChange","onInput","inputMode","inputmode","LookupInputField","data","lookup","list","defaultValue","HeaderInputs","DataInputs","itemValues","Products","itemName","rate","quantity","Row","_rate","sumTotal","inputMap","Object","entries","forEach","itemField","toFixed","DataRow","RowSet","rows","push","rowNo","length","rowIndex","splice","pop","callback","reduce","x","y","DataGroup","dataRows","setFieldsWithSelectedRow","Button","actionListner","iconClass","AddRowButton","modifyTableEventListener","callBack","newPrintRow","size","setCurrentRow","addNewItem","DeleteRowButton","deleteLastRow","alert","deleteLastItem","SimpleBiller","handlePrintingBottom","handlePrintingTop","isPrintingTop","isPrintingBottom","ele","printButtonRef","handleBillInfoChangedEvent","handleRowChangeEvent","handleTableModifyEvent","handleRowOnClickEvent","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1e9a9cbb.chunk.js","sourcesContent":["import React from 'react';\n\nconst BillInfo = ({ billInfo }) => {\n    const infoStyles = {\n        borderBottom: '1px dashed black',\n        paddingBottom: '5px'\n    }\n    const fontStyle = {\n        fontSize: '0.75rem'\n    }\n    const labels = {\n        cName: \"Customer /Shop Name:-\",\n        vNo: \"Bill No:-\",\n        cContact: \"Customer /Shop Contact:-\",\n        bDate: \"Date:-\"\n    }\n    return (\n        <div className=\"resp-table-row\" style={fontStyle}>\n            <div className=\"table-body-cell pb-2 pr-1 pl-1\">\n                <div className=\"row\">\n                    <div className='col-sm-3' >{labels.cName}\n                    </div>\n                    <div className='col-sm-3' style={infoStyles} id=\"customerNamePrint\">{billInfo.customerName}</div>\n                    <div className='offset-sm-1 col-sm-2'>{labels.vNo}</div>\n                    <div className='col-sm-2' style={infoStyles} id=\"voucherNoPrint\">{billInfo.voucherNo}</div>\n                </div>\n                <div className=\"row\">\n                    <div className='col-sm-3' >{labels.cContact}\n                    </div>\n                    <div className='col-sm-3' style={infoStyles} id=\"customerContactPrint\">{billInfo.customerContact}</div>\n                    <div className='offset-sm-1 col-sm-2'>{labels.bDate}</div>\n                    <div className='col-sm-2' style={infoStyles} id=\"billDatePrint\">{billInfo.billDate}</div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default BillInfo","import React from 'react';\n\nclass PrintColumn {\n    constructor(name, className, itemId) {\n        this.name = name;\n        this.className = className;\n        this.itemId = itemId;\n    }\n    DataCell = ({ row }) => {\n        return (\n            <div id={generateCellId(this.itemId, row.sno)} className='table-body-cell'>\n                {row[this.itemId]}\n            </div>\n        )\n    }\n    HeaderCell = () => {\n        return (\n            <div id={generateCellId(this.itemId)} className='table-header-cell'>\n                {this.name}\n            </div>\n        )\n    }\n}\nconst generateCellId = (itemId, rowSeq = 0) => {\n    return itemId + '_cell_' + rowSeq;\n}\n\nconst PrintColumns = {\n    columns: [\n        new PrintColumn('S. No.', 'col-1', 'sno'),\n        new PrintColumn('Item Name', 'col-3', 'itemName'),\n        new PrintColumn('Rate', 'col-2', 'rate'),\n        new PrintColumn('Quantity', 'col-2', 'quantity'),\n        new PrintColumn('Total', 'col-2', 'total')\n    ]\n}\nexport const HeaderCells = () => {\n    return PrintColumns.columns.map(columnInfo => <columnInfo.HeaderCell\n        key={columnInfo.itemId} />)\n}\nexport const DataCells = ({ row }) => {\n    return PrintColumns.columns.map(columnInfo => <columnInfo.DataCell\n        key={columnInfo.itemId} row={row} />);\n}\nexport default PrintColumns \n","import React from 'react';\nimport { HeaderCells } from '../../modules/table/printableColumns';\n\nconst BillDetails = ({ dataGroup, grandTotal }) => {\n    return (\n        <div className=\"resp-table-row\">\n            <div className=\"table-body-cell\">\n                <div className=\"table\" id=\"printable\">\n                    <div className=\"resp-table-header\">\n                        <HeaderCells />\n                    </div>\n                    {dataGroup}\n                    <div className=\"resp-table-footer\">\n                        <div className=\"table-body-cell\"></div>\n                        <div className=\"table-body-cell\">Grand Total</div>\n                        <div className=\"table-body-cell\"></div>\n                        <div className=\"table-body-cell\"></div>\n                        <div className=\"table-body-cell\" id=\"grandTotal\">{grandTotal}</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default BillDetails\n\n","import React from 'react';\nimport Proprieter from '../../resources/proprieter.json'\n\nconst BillFooter = () => {\n    return (\n        <div className=\"resp-table-footer\">\n            <div className=\"table-footer-cell\">\n                <div className=\"row\">\n                    <div className='col-sm-9'>\n                        Proprieter:- {Proprieter.Name}\n                    </div>\n                    <div className='col-sm-9'>\n                        Contact:- {Proprieter.Contact}\n                    </div>\n                    <div className='col-sm-9'>\n                        <div>Address:- {Proprieter.AddressLine1}\n                        </div>\n                        <div>{Proprieter.AddressLine2}</div>\n                        <div> {Proprieter.AddressLine3}</div>\n                    </div>\n                    <div className='col-sm-3' style={{ textAlign: \"center\" }}>\n                        _____________________\n                                </div>\n                    <div className='col-sm-9'>\n                        Pincode:- {Proprieter.Pincode}\n                    </div>\n                    <div className='col-sm-3' style={{ textAlign: \"center\" }}>\n                        Signature\n                                </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default BillFooter","import React, { Component } from 'react';\nimport './index.css';\nimport BillInfo from './billInfo';\nimport BillDetails from './billDetails';\nimport BillFooter from './billFooter';\nimport Proprieter from '../../resources/proprieter.json'\n\nconst flipperValues = { CUSTOMER_ONLY: 'Print Seller Copy', WITH_SELLER: 'Print Only Customer Copy' }\nclass BillContainer extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            flipperValue: flipperValues.CUSTOMER_ONLY\n        }\n        this.flipCopyButton=this.flipCopyButton.bind(this)\n        this.printSellerCopy=this.printSellerCopy.bind(this)\n    }\n   \n    flipCopyButton() {\n        const flipperValue = this.state.flipperValue == flipperValues.CUSTOMER_ONLY ? flipperValues.WITH_SELLER : flipperValues.CUSTOMER_ONLY;\n        this.setState(\n           { flipperValue: flipperValue}\n        )\n    }\n    printSellerCopy(){\n        return this.state.flipperValue == flipperValues.WITH_SELLER\n    }\n    render() {\n        const { billInfo, grandTotal, children } = this.props;\n        const copy = (\n            <div>\n                <div className=\"text-center\" >\n                    <button className=\"btn btn-primary\" onClick={this.flipCopyButton} hidden={this.props.isPrinting}>\n                        <span className=\"display-5\">{this.state.flipperValue}</span>\n                    </button>\n                </div >\n                {this.props.isPrinting && this.printSellerCopy() ? this.getPrintVersion(billInfo, grandTotal, children)\n                    : this.getSingle(billInfo, grandTotal, children)}\n            </div>\n        )\n        return copy\n    }\n    getSingle = (billInfo, grandTotal, children) => {\n        return (\n            <div className='col-sm-12'>\n                <Printable billInfo={billInfo} grandTotal={grandTotal}>\n                    {children}\n                </Printable>\n            </div>\n        )\n    }\n\n    getPrintVersion = (billInfo, grandTotal, children) => {\n        return <div>\n            <div className='col-sm-6'>\n                <div className='row'>Seller Copy</div>\n                <Printable billInfo={billInfo} grandTotal={grandTotal}>\n                    {children}\n                </Printable>\n            </div>\n            <div className='col-sm-6'>\n                <div className='row'>Customer Copy</div>\n                <Printable billInfo={billInfo} grandTotal={grandTotal}>\n                    {children}\n                </Printable>\n            </div>\n        </div>\n    }\n}\n\nconst Printable = React.forwardRef(\n    function printable({ billInfo, children, grandTotal }, ref) {\n        return (\n            <div className=\"row printable bill-info pl-1 pr-1\" id=\"billInfo\" ref={ref}>\n                <div className='table' id=\"billInfoTable\">\n                    <div className=\"resp-table-title\">\n                        <div className=\"table-header-cell\">{Proprieter.Establishment}</div>\n                    </div>\n                    <BillInfo billInfo={billInfo} />\n                    <BillDetails dataGroup={children} grandTotal={grandTotal} />\n                    <BillFooter />\n                </div>\n            </div>\n        )\n    });\nexport default BillContainer","import React, { Component } from 'react';\nexport default class PrintButton extends Component {\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.props.isPrinting) {\n            window.print();\n            this.props.onClick(false);\n            window.onafterprint = () => {\n                this.props.onClick(false);\n            };\n        }\n    }\n    printTheTable = () => {\n        this.props.onClick(true);\n    }\n    render() {\n        const text = this.props.isPrinting ? 'Printing' : 'Print';\n        return (\n            <div className=\"text-center\" >\n                <button className=\"btn btn-primary\" onClick={this.printTheTable}>\n                    <span className=\"display-5\">{text}</span>\n                </button>\n            </div >\n        );\n    }\n}","import React from 'react';\nconst GrandTotalSticky = ({ grandTotal }) => {\n    return (\n        <div className=\"card text-white bg-info text-center\">\n            <div className='card-header'>GRAND TOTAL</div>\n            <div className='card-body'>{grandTotal}</div>\n        </div>\n    )\n}\n\nexport default GrandTotalSticky","import React,{ Component } from 'react';\n\nclass ItemLabel extends Component {\n    render(){\n        return (\n        <span className=\"badge badge-dark\"><label>{this.props.label}</label></span>\n        )\n    }\n}\n\nexport default ItemLabel","import React from 'react';\n\nexport default class PrintUtility {\n\tstatic cells = {}\n\tstatic getDataGroup(parentId, row) {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tid={parentId + 'DataGroup'}\n\t\t\t\tclassName='table-row-group'>\n\t\t\t\t{row}\n\t\t\t</div>\n\t\t);\n\t}\n\tstatic createHeaderRow() {\n\t\treturn (\n\t\t\t<div className='resp-table-header'>\n\t\t\t</div>\n\t\t);\n\t}\n\tstatic getFooterRow() {\n\t\treturn (\n\t\t\t<div className='resp-table-footer'>\n\t\t\t</div>\n\t\t);\n\t}\n\tstatic getGrandTotalRow() {\n\t\treturn (<div className='table'>\n\t\t\t<div className='resp-table-row'>\n\t\t\t\t<div className='table-body-cell'>\n\t\t\t\t\tGrand Total\n\t\t\t\t</div>\n\t\t\t\t<div id='grandTotal' className='table-body-cell'>\n\t\t\t\t\t0\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>);\n\t}\n\tstatic createTableRow(index, listener, cells) {\n\t\treturn (\n\t\t\t\t<div\n\t\t\t\t\tid={'dataRow' + index}\n\t\t\t\t\tclassName='resp-table-row data-table-row'\n\t\t\t\t\ttitle='Click on the row to edit !!!'\n\t\t\t\t\tonClick={listener}>\n\t\t\t\t\t{cells}\n\t\t\t\t</div>\n\t\t)\n\t}\n\tstatic getColumnName(itemId, name) {\n\t\treturn `${name}`;\n\t}\n\n\tstatic updatePrintItem(row, itemId, grandTotalValue) {\n\t\tconst cellId = row.getCurrentCellId(itemId);\n\t\tlet cell = document.getElementById(cellId);\n\t\tthis.highlightChangedElement(cell);\n\t\tcell.innerHTML = row[itemId];\n\t\tthis.updateSubTotal(row);\n\t\tthis.updateGrandTotal(grandTotalValue);\n\t}\n\n\tstatic updateSubTotal(row) {\n\t\tlet cellId = row.getCurrentCellId('total');\n\t\tlet cell = document.getElementById(cellId);\n\t\tthis.highlightChangedElement(cell);\n\t\tcell.innerHTML = row.total;\n\t}\n\tstatic updateGrandTotal(grandTotalValue) {\n\t\tconst grandTotal = document.getElementById('grandTotal');\n\t\tthis.highlightChangedElement(grandTotal);\n\t\tgrandTotal.innerText = grandTotalValue;\n\t}\n\n\tstatic highlightChangedElement(element, timeout = 300) {\n\t\tconst oldColor = element.parentElement.style.backgroundColor;\n\t\telement.style.backgroundColor = '#FF0'\n\t\tsetTimeout(() => element.style.backgroundColor = oldColor, timeout);\n\n\t}\n\n\tstatic updatePrintHeader(element) {\n\t\tconst printHeaderId = element.id + 'Print';\n\t\tif (element.type === 'date') {\n\t\t\tdocument.getElementById(printHeaderId).innerText = new Date(element.value).toLocaleDateString()\n\t\t}\n\t\telse{\n\t\t\tdocument.getElementById(printHeaderId).innerText = element.value;\n\t\t}\n\n\t}\n\n\tstatic updatePrintObj(element, rowSet) {\n        const itemId = element.id;\n        const itemValue = typeof element.value === \"string\" ? element.value : parseFloat(element.value);\n        const pattern = element.pattern;\n        let test = true;\n        const currentRow = rowSet.getCurrentRow();\n        if(pattern){\n            test = RegExp(pattern).test(itemValue);\n        }\n        if(test){\n            currentRow[itemId] = itemValue;\n            PrintUtility.updatePrintItem(currentRow, itemId, rowSet.grandTotal);\n        }\n        else{\n            element.value = currentRow[itemId];\n        }\n        \n    }\n\n}\n","import React, { Component } from 'react';\nimport PrintUtility from '../../modules/printUtility'\nclass InputField extends Component {\n    constructor(props) {\n        super(props);\n        this.isItemVar = this.props.isItemVar === \"true\" ? true : false;\n        this.className = \"form-control\";\n        if (!this.isItemVar) {\n            this.className += \" print-header-input\";\n        }\n        this.handleOnInput = this.handleOnInput.bind(this);\n        this.handleOnChange = this.handleOnChange.bind(this);\n    }\n    handleOnInput(event) {\n        if (this.isItemVar) {\n            PrintUtility.updatePrintObj(event.target, this.props.rowSet);\n        }\n        else {\n            PrintUtility.updatePrintHeader(event.target);\n        }\n    }\n    handleOnChange(event) {\n        this.props.onChange(event)\n    }\n    render() {\n        const value = this.props.value\n        return (\n            <input className={this.className}\n                id={this.props.id}\n                type={this.props.type}\n                onInput={this.handleOnInput}\n                onChange={this.props.onChange}\n                inputMode={this.props.inputmode}\n                pattern={this.props.pattern}\n                value={value} />\n        )\n    }\n}\n\nexport class LookupInputField extends InputField {\n   \n    render() {\n        let data = []\n        if (typeof this.props.lookup == 'function') {\n            data = this.props.lookup();\n        }\n        const value = this.props.value\n        return (\n            <div>\n                <input className=\"form-control\"\n                    id={this.props.id}\n                    type={this.props.type}\n                    onInput={this.handleOnInput}\n                    onChange={this.props.onChange}\n                    inputMode={this.props.inputmode}\n                    pattern={this.props.pattern}\n                    list=\"itemNames\"\n                    value={value} />\n                <datalist id=\"itemNames\" defaultValue=\"\">\n                    <option value=\"\">select</option>\n                    {\n                        data.map(\n                            (itemValue) => <option key={itemValue} value={itemValue} />\n                        )\n                    }\n                </datalist>\n            </div>\n        )\n    }\n}\nexport default InputField","import React from 'react'\nimport ItemLabel from './itemLabel'\nimport InputField from './itemField'\nconst HeaderInputs = ({ onChange }) => {\n    return (\n        <div>\n            <div className=\"row\">\n                <div className=\"form-group col-sm-6\">\n                    <ItemLabel label='Customer /Shop Name' />\n                    <InputField id=\"customerName\" type=\"text\"\n                        onChange={onChange} />\n                </div>\n                <div className=\"form-group col-sm-6\">\n                    <ItemLabel label='Cust /Shop Contact' />\n                    <InputField id=\"customerContact\" type=\"number\" \n                    onChange={onChange}/>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"form-group col-sm-6\">\n                    <ItemLabel label='Voucher No.' />\n                    <InputField id=\"voucherNo\" type=\"number\" \n                    onChange={onChange}/>\n                </div>\n                <div className=\"form-group col-sm-6\">\n                    <ItemLabel label='Date' />\n                    <InputField id=\"billDate\" type=\"date\" \n                    onChange={onChange}/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default HeaderInputs","import React from 'react'\nimport ItemLabel from './itemLabel'\nimport InputField, { LookupInputField } from './itemField'\nimport Products from '../../resources/products.json'\n\nconst DataInputs = (props) => {\n    const itemValues = props.itemValues\n    return (\n        <div>\n            <div className=\"row\">\n                <div className=\"form-group col-sm-12\">\n                    <ItemLabel label='Item Name' />\n                    <LookupInputField id=\"itemName\" type=\"text\" lookup={() => Products}\n                        isItemVar=\"true\" rowSet={props.rowSet} value={itemValues.itemName}\n                        onChange={props.onChange}\n                    />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"form-group col-sm-6\">\n                    <ItemLabel label='Rate' />\n                    <InputField id=\"rate\" type=\"text\" inputmode=\"numeric\"\n                        pattern=\"^\\d{0,5}(?:\\.{0,1})(?:\\d{1,2}){0,1}?$\" isItemVar=\"true\"\n                        rowSet={props.rowSet}\n                        value={itemValues.rate}\n                        onChange={props.onChange}\n                    />\n                </div>\n                <div className=\"form-group col-sm-6\">\n                    <ItemLabel label='Quantity' />\n                    <InputField id=\"quantity\" type=\"text\" inputmode=\"numeric\"\n                        pattern=\"^\\d{0,5}$\" isItemVar=\"true\" rowSet={props.rowSet}\n                        value={itemValues.quantity}\n                        onChange={props.onChange}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default DataInputs","import React from 'react';\nimport { DataCells } from './printableColumns';\nexport default class Row {\n    constructor(index) {\n        this.itemName = '';\n        this.quantity = 0;\n        this._rate = 0;\n        this.sumTotal = 0;\n        this.sno = index + 1;\n    }\n    get total() {\n        this.sumTotal = this.rate * this.quantity;\n        return this.sumTotal.toFixed(2);\n    }\n    get index() {\n        return this.sno - 1;\n    }\n    get rate() {\n        let value = parseFloat(this._rate);\n        if (!value)\n            value = 0;\n        return value;\n    }\n    set rate(value) {\n        this._rate = parseFloat(value);\n    }\n    generateCellId(itemId) {\n        return itemId + '_cell_' + this.sno;\n    }\n    getCurrentCellId(itemId) {\n        return itemId + '_cell_' + this.sno;\n    }\n    resetFeilds(inputMap) {\n        Object.entries(this).forEach((itemId, itemValue) => {\n            const itemField = inputMap[itemId];\n            if (itemField) {\n                itemField.value = itemValue;\n            }\n        });\n\n    }\n}\n\nexport const DataRow = ({row, onClick }) => {\n    return (\n        <div\n            id={'dataRow' + row.sno}\n            className='resp-table-row data-table-row'\n            title='Click on the row to edit !!!'\n            onClick={() => onClick(row.sno)} >\n            <DataCells row={row}/>\n        </div>\n    );\n}","import React from 'react';\nimport Row, { DataRow } from './printableRow';\nexport default class RowSet {\n    constructor() {\n        this.rows = [new Row(0)];\n        this.currentRow = 1;\n        this.inputMap = {};\n    }\n    push(row) {\n        return this.rows.push(row)\n    }\n    getCurrentRow() {\n        return this.rows[this.currentRow - 1];\n    }\n    setCurrentRow(rowNo) {\n        this.currentRow = rowNo;\n    }\n    getCurrentCellId(itemId) {\n        return itemId + '_cell_' + this.currentRow;\n    }\n\n    size() {\n        return this.rows.length;\n    }\n    deleteRow(rowIndex) {\n       return this.rows.splice(rowIndex, 1);\n    }\n    deleteLastRow() {\n        return this.rows.pop();\n    }\n\n    getInputMap() {\n        return this.inputMap;\n    }\n\n    get grandTotal() {\n        return this.rows.map(row => parseFloat(row.total)).reduce((x, y) => x + y).toFixed(2);\n    }\n\n    setFieldsWithSelectedRow(rowNo, callback) {\n        this.currentRow = rowNo;\n        callback()\n    }\n    \n}\n\nexport const DataGroup = ({ id,rowSet, onClick }) => {\n    const dataRows = rowSet.rows.map(row =>{\n        return <DataRow key={row.sno} row={row}\n        onClick={event => rowSet.setFieldsWithSelectedRow(row.sno, onClick)} />\n    })\n    return (\n        <div id={id} className='table-row-group'>\n            {dataRows}\n        </div>\n    );\n}","import React from 'react';\n\nconst Button = (props) => {\n    return (\n        <div className=\"text-center\">\n            <button className={props.className} onClick={props.actionListner}>\n                <span className={props.iconClass}></span>\n                <span className=\"h5\">{props.children}</span>\n            </button>\n        </div>\n    )\n}\nexport default Button","import React from 'react';\nimport Row from '../../modules/table/printableRow';\nimport Button from './button';\n\nconst AddRowButton = ({ rowSet, modifyTableEventListener }) => {\n    const addNewItem = (callBack) => {\n        const newPrintRow = new Row(rowSet.size());\n        rowSet.push(newPrintRow);\n        rowSet.setCurrentRow(newPrintRow.sno);\n        callBack();\n    };\n    return (\n        <Button iconClass=\"fa fa-plus\" className=\"btn btn-primary\"\n            actionListner={() => addNewItem(modifyTableEventListener)}>\n            Add New Item\n        </Button>\n    );\n}\nexport default AddRowButton","import React from 'react';\nimport Button from './button';\n\nconst DeleteRowButton = ({ rowSet, modifyTableEventListener }) => {\n    const deleteLastItem = (callBack) => {\n        const rowIndex = rowSet.size() - 1;\n        if (rowIndex > 0) {\n            rowSet.deleteLastRow();\n            rowSet.setCurrentRow(rowIndex);\n            callBack();\n        }\n        else {\n            alert(\"At least one row is required.\");\n        }\n    };\n    return (\n        <Button iconClass=\"fa fa-minus\" className=\"btn btn-danger\"\n            actionListner={() => deleteLastItem(modifyTableEventListener)}>\n            Delete Last Item\n        </Button>\n    );\n}\n\nexport default DeleteRowButton","import React, { Component } from 'react'\nimport BillContainer from '../bill'\nimport PrintButton from './printButton'\nimport GrandTotalSticky from './grandTotalSticky'\nimport './index.css'\nimport './print.css'\nimport HeaderInputs from './headerInputs'\nimport DataInputs from './dataInputs'\nimport RowSet, { DataGroup } from '../../modules/table/printableRows'\nimport AddRowButton from '../button/addRowButton'\nimport DeleteRowButton from '../button/deleteRowButton'\n\nexport default class SimpleBiller extends Component {\n    constructor(props) {\n        super(props)\n        const rowSet = new RowSet();\n        this.state = {\n            rowSet: rowSet,\n            billInfo: {},\n            itemValues: rowSet.getCurrentRow(),\n            isPrinting: false\n        }\n        this.handlePrintingBottom = this.handlePrintingBottom.bind(this);\n        this.handlePrintingTop = this.handlePrintingTop.bind(this);\n    }\n\n    handleTableModifyEvent() {\n        this.setState({\n            itemValues: this.state.rowSet.getCurrentRow()\n        })\n    }\n    handleRowChangeEvent(event) {\n        this.setState(this.state.rowSet)\n    }\n    handleBillInfoChangedEvent(event) {\n        const billInfo = {\n            ...this.state.billInfo,\n            [event.target.id]: `${event.target.value}`\n        }\n        this.setState({\n            billInfo: billInfo\n        })\n    }\n    handleRowOnClickEvent() {\n        this.setState({\n            itemValues: this.state.rowSet.getCurrentRow()\n        })\n    }\n    handlePrintingTop(isPrinting) {\n        this.setState({\n            isPrintingTop: isPrinting\n        })\n    }\n    handlePrintingBottom(isPrinting) {\n        this.setState({\n            isPrintingBottom: isPrinting\n        })\n    }\n    render() {\n        return (\n            <div>\n                <div className=\"container col-sm-10 mt-2\">\n                    <div className=\"card non-printable form-bg\">\n                        <div className=\"card-header\">\n                            <div className=\"offset-sm-10\">\n                                <PrintButton onClick={this.handlePrintingTop} isPrinting={this.state.isPrintingTop}\n                                ref={ele => this.printButtonRef = ele} />\n                            </div>\n\n                        </div>\n                        <div className=\"col-sm-12 card-title border-bottom\">\n                            <HeaderInputs onChange={this.handleBillInfoChangedEvent.bind(this)} />\n                        </div>\n                        <div className=\"col-sm-12 card-body\">\n                            <div className=\"row border-bottom\">\n                                <div className=\"col-sm-10\">\n                                    <DataInputs rowSet={this.state.rowSet} itemValues={this.state.itemValues}\n                                        onChange={this.handleRowChangeEvent.bind(this)}\n                                    />\n                                </div>\n                                <div className=\"col-sm-2\">\n                                    <GrandTotalSticky grandTotal={this.state.rowSet.grandTotal} />\n                                </div>\n                            </div>\n                            <div className=\"row mt-2\">\n                                <div className=\"col-sm-4\">\n                                    <AddRowButton rowSet={this.state.rowSet}\n                                        modifyTableEventListener={this.handleTableModifyEvent.bind(this)} />\n                                </div>\n                                <div className=\"col-sm-4\">\n                                    <DeleteRowButton rowSet={this.state.rowSet}\n                                        modifyTableEventListener={this.handleTableModifyEvent.bind(this)} />\n                                </div>\n                                <div className=\"offset-sm-3\">\n                                    <PrintButton onClick={this.handlePrintingBottom} isPrinting={this.state.isPrintingBottom} />\n                                </div>\n                            </div>\n                        </div>\n\n                    </div>\n                    <div className=\"bill-container\">\n                        <BillContainer\n                            billInfo={this.state.billInfo}\n                            grandTotal={this.state.rowSet.grandTotal}\n                            isPrinting={this.state.isPrintingTop || this.state.isPrintingBottom}>\n                            <DataGroup id='PrintTable_DataGroup'\n                                rowSet={this.state.rowSet}\n                                onClick={this.handleRowOnClickEvent.bind(this)} />\n                        </BillContainer>\n                    </div>\n\n                </div>\n            </div>\n        )\n    };\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\n//COMPONENTS\nimport SimpleBiller from './components/simpleBiller'\nfunction App() {\n  return (\n    <div>\n      <SimpleBiller></SimpleBiller>\n    </div>\n  );\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}